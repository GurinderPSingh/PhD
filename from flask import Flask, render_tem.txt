from flask import Flask, render_template, request
import matplotlib.pyplot as plt
import io
import base64
from sisWeb import (simulate_scaling, simulate_frequency_vs_wavelength,
                 simulate_delay_vs_frequency, simulate_harmonic_content)
from NewtonRaphsonWeb2 import simulate_diode, simulate_diode_with_resistor

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def index():
    result = None
    graph = None
    if request.method == 'POST':
        simulation_type = request.form['simulation']
        if simulation_type == 'diode':
            # Diode Simulation
            ID_target = float(request.form['ID_target'])
            VD, VD_range, ID = simulate_diode(ID_target)

            result = f"Voltage across diode (VD): {VD:.6f} V"
            plt.figure()
            plt.plot(VD_range, ID * 1e3, label="Diode IV Curve")
            plt.axvline(VD, color='r', linestyle='--', label=f"VD = {VD:.3f} V")
            plt.axhline(ID_target * 1e3, color='g', linestyle='--', label=f"ID = {ID_target * 1e3:.1f} mA")
            plt.xlabel("Voltage Across Diode (V)")
            plt.ylabel("Current Through Diode (mA)")
            plt.title("Single Diode IV Curve")
            plt.legend()
            plt.grid()
            plt.tight_layout()

        elif simulation_type == 'diode_resistor':
            # Diode + Resistor Simulation
            VS = float(request.form['VS'])
            R = float(request.form['R'])
            VD, VD_range, ID_diode, I_R = simulate_diode_with_resistor(VS, R)

            result = f"Voltage across diode with resistor (VD): {VD:.6f} V"
            plt.figure()
            plt.plot(VD_range, ID_diode * 1e3, label="Diode IV Curve")
            plt.plot(VD_range, I_R * 1e3, label="Resistor Current (I_R)")
            plt.axvline(VD, color='r', linestyle='--', label=f"VD = {VD:.3f} V")
            plt.xlabel("Voltage Across Diode (V)")
            plt.ylabel("Current (mA)")
            plt.title("Diode + Resistor IV Curve")
            plt.legend()
            plt.grid()
            plt.tight_layout()

        elif simulation_type == 'scaling':
            # Scaling Analysis
            scaling_factors, rc_delay = simulate_scaling()
            plt.figure()
            plt.plot(scaling_factors, rc_delay, marker='o', label="RC Delay")
            plt.xlabel("Scaling Factor (S)")
            plt.ylabel("RC Delay (seconds)")
            plt.title("Impact of Scaling on RC Delay")
            plt.grid()
            plt.legend()
            plt.tight_layout()

        elif simulation_type == 'frequency_wavelength':
            # Frequency vs Wavelength
            frequency, wavelength = simulate_frequency_vs_wavelength()
            plt.figure()
            plt.plot(frequency / 1e9, wavelength, label="Wavelength")
            plt.xlabel("Frequency (GHz)")
            plt.ylabel("Wavelength (m)")
            plt.title("Frequency vs. Wavelength")
            plt.grid()
            plt.legend()
            plt.tight_layout()

        elif simulation_type == 'delay_frequency':
            # Delay vs Frequency
            frequency, delay_vs_freq = simulate_delay_vs_frequency()
            plt.figure()
            plt.plot(frequency / 1e9, delay_vs_freq * 1e12, label="RC Delay")
            plt.xlabel("Frequency (GHz)")
            plt.ylabel("Delay (ps)")
            plt.title("RC Delay vs. Frequency")
            plt.grid()
            plt.legend()
            plt.tight_layout()

        elif simulation_type == 'harmonics':
            # Harmonic Content
            harmonic_frequencies, results = simulate_harmonic_content()
            plt.figure()
            for label, harmonics in results.items():
                plt.plot(harmonic_frequencies, harmonics / 1e9, label=label)
            plt.xlabel("Harmonic Number")
            plt.ylabel("Frequency (GHz)")
            plt.title("Harmonic Frequencies for Rise Times")
            plt.grid()
            plt.legend()
            plt.tight_layout()

        # Convert plot to image for display
        img = io.BytesIO()
        plt.savefig(img, format='png')
        img.seek(0)
        graph = base64.b64encode(img.getvalue()).decode()

    return render_template('index.html', result=result, graph=graph)

if __name__ == '__main__':
    app.run(debug=True)



///////////////
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simulation Portal</title>
    <script>
        function toggleInputs() {
            const simulation = document.getElementById("simulation").value;
            const diodeInputs = document.getElementById("diode-inputs");
            const diodeResistorInputs = document.getElementById("diode-resistor-inputs");

            diodeInputs.style.display = simulation === "diode" ? "block" : "none";
            diodeResistorInputs.style.display = simulation === "diode_resistor" ? "block" : "none";
        }
    </script>
</head>
<body>
<h1>Simulation Portal</h1>
<form method="POST">
    <label for="simulation">Choose Simulation:</label>
    <select id="simulation" name="simulation" onchange="toggleInputs()">
        <option value="diode">Diode Simulation</option>
        <option value="diode_resistor">Diode + Resistor Simulation</option>
        <option value="scaling">Scaling Analysis</option>
        <option value="frequency_wavelength">Frequency vs. Wavelength</option>
        <option value="delay_frequency">Delay vs. Frequency</option>
        <option value="harmonics">Harmonic Analysis</option>
    </select><br><br>

    <!-- Diode Simulation Inputs -->
    <div id="diode-inputs" style="display: none;">
        <label for="ID_target">Target Current (ID):</label>
        <input type="number" id="ID_target" name="ID_target" step="0.000001" placeholder="e.g., 0.001"><br><br>
    </div>

    <!-- Diode + Resistor Simulation Inputs -->
    <div id="diode-resistor-inputs" style="display: none;">
        <label for="VS">Source Voltage (VS):</label>
        <input type="number" id="VS" name="VS" step="0.01" placeholder="e.g., 5.0"><br><br>

        <label for="R">Resistor Value (R):</label>
        <input type="number" id="R" name="R" step="1" placeholder="e.g., 1000"><br><br>
    </div>

    <button type="submit">Simulate</button>
</form>

{% if result %}
<h2>Result:</h2>
<p>{{ result }}</p>
{% endif %}

{% if graph %}
<h2>Graph:</h2>
<img src="data:image/png;base64,{{ graph }}" alt="Simulation Graph">
{% endif %}
</body>
</html>
////



import numpy as np
import matplotlib.pyplot as plt
import time
import io

def simulate_euler_rc_circuit():
    # Parameters
    R = 1000  # Resistance (Ohms)
    C = 1e-6  # Capacitance (Farads)
    V_source = 5  # Source voltage (Volts)
    time_steps = 100_000  # Increased time steps
    t = np.linspace(0, 0.01, time_steps)  # Time array
    h = t[1] - t[0]  # Time step size

    # Initial conditions
    V_euler = np.zeros_like(t)
    V_rk4 = np.zeros_like(t)
    V_bdf = np.zeros_like(t)
    V_euler[0] = V_rk4[0] = V_bdf[0] = 0  # Initial voltage across the capacitor

    # Measure time for Euler's Method
    start_time_euler = time.time()
    for i in range(1, len(t)):
        dVdt = (V_source - V_euler[i-1]) / (R * C)
        V_euler[i] = V_euler[i-1] + h * dVdt
    end_time_euler = time.time()

    # Measure time for Runge-Kutta (RK4) Method
    start_time_rk4 = time.time()
    for i in range(1, len(t)):
        k1 = (V_source - V_rk4[i-1]) / (R * C)
        k2 = (V_source - (V_rk4[i-1] + 0.5 * h * k1)) / (R * C)
        k3 = (V_source - (V_rk4[i-1] + 0.5 * h * k2)) / (R * C)
        k4 = (V_source - (V_rk4[i-1] + h * k3)) / (R * C)
        V_rk4[i] = V_rk4[i-1] + (h / 6) * (k1 + 2*k2 + 2*k3 + k4)
    end_time_rk4 = time.time()

    # Measure time for Backward Differentiation Formula (BDF-1)
    start_time_bdf = time.time()
    for i in range(1, len(t)):
        # Implicit equation for BDF-1
        V_bdf[i] = (V_bdf[i-1] + h * V_source / (R * C)) / (1 + h / (R * C))
    end_time_bdf = time.time()

    # Calculate simulation times
    time_euler = end_time_euler - start_time_euler
    time_rk4 = end_time_rk4 - start_time_rk4
    time_bdf = end_time_bdf - start_time_bdf

    # Plot Results
    plt.figure(figsize=(10, 6))
    plt.plot(t, V_euler, label=f"Euler's Method (Time: {time_euler:.6f} s)", linewidth=1.5)
    plt.plot(t, V_rk4, label=f"Runge-Kutta (RK4) (Time: {time_rk4:.6f} s)", linestyle='--', linewidth=1.5)
    plt.plot(t, V_bdf, label=f"BDF-1 (Time: {time_bdf:.6f} s)", linestyle=':', linewidth=1.5)
    plt.title("Transient Response of RC Circuit")
    plt.xlabel("Time (s)")
    plt.ylabel("Voltage (V)")
    plt.grid()
    plt.legend()
    plt.tight_layout()

    # Save plot to BytesIO for integration with Flask
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)  # Reset pointer to the start of the file
    plt.close()  # Close the plot to prevent reuse in Flask context

    # Print Simulation Times
    print(f"Euler's Method Simulation Time: {time_euler:.6f} seconds")
    print(f"Runge-Kutta (RK4) Simulation Time: {time_rk4:.6f} seconds")
    print(f"BDF-1 Simulation Time: {time_bdf:.6f} seconds")

    return img




////////////////////


